// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/v1/cm.proto

package cmv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/althk/sahamati/proto/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CMServiceName is the fully-qualified name of the CMService service.
	CMServiceName = "proto.v1.CMService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CMServiceRequestVoteProcedure is the fully-qualified name of the CMService's RequestVote RPC.
	CMServiceRequestVoteProcedure = "/proto.v1.CMService/RequestVote"
	// CMServiceAppendEntriesProcedure is the fully-qualified name of the CMService's AppendEntries RPC.
	CMServiceAppendEntriesProcedure = "/proto.v1.CMService/AppendEntries"
	// CMServiceAddMemberProcedure is the fully-qualified name of the CMService's AddMember RPC.
	CMServiceAddMemberProcedure = "/proto.v1.CMService/AddMember"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	cMServiceServiceDescriptor             = v1.File_proto_v1_cm_proto.Services().ByName("CMService")
	cMServiceRequestVoteMethodDescriptor   = cMServiceServiceDescriptor.Methods().ByName("RequestVote")
	cMServiceAppendEntriesMethodDescriptor = cMServiceServiceDescriptor.Methods().ByName("AppendEntries")
	cMServiceAddMemberMethodDescriptor     = cMServiceServiceDescriptor.Methods().ByName("AddMember")
)

// CMServiceClient is a client for the proto.v1.CMService service.
type CMServiceClient interface {
	RequestVote(context.Context, *connect.Request[v1.RequestVoteRequest]) (*connect.Response[v1.RequestVoteResponse], error)
	AppendEntries(context.Context, *connect.Request[v1.AppendEntriesRequest]) (*connect.Response[v1.AppendEntriesResponse], error)
	AddMember(context.Context, *connect.Request[v1.AddMemberRequest]) (*connect.Response[v1.AddMemberResponse], error)
}

// NewCMServiceClient constructs a client for the proto.v1.CMService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCMServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CMServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &cMServiceClient{
		requestVote: connect.NewClient[v1.RequestVoteRequest, v1.RequestVoteResponse](
			httpClient,
			baseURL+CMServiceRequestVoteProcedure,
			connect.WithSchema(cMServiceRequestVoteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		appendEntries: connect.NewClient[v1.AppendEntriesRequest, v1.AppendEntriesResponse](
			httpClient,
			baseURL+CMServiceAppendEntriesProcedure,
			connect.WithSchema(cMServiceAppendEntriesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addMember: connect.NewClient[v1.AddMemberRequest, v1.AddMemberResponse](
			httpClient,
			baseURL+CMServiceAddMemberProcedure,
			connect.WithSchema(cMServiceAddMemberMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// cMServiceClient implements CMServiceClient.
type cMServiceClient struct {
	requestVote   *connect.Client[v1.RequestVoteRequest, v1.RequestVoteResponse]
	appendEntries *connect.Client[v1.AppendEntriesRequest, v1.AppendEntriesResponse]
	addMember     *connect.Client[v1.AddMemberRequest, v1.AddMemberResponse]
}

// RequestVote calls proto.v1.CMService.RequestVote.
func (c *cMServiceClient) RequestVote(ctx context.Context, req *connect.Request[v1.RequestVoteRequest]) (*connect.Response[v1.RequestVoteResponse], error) {
	return c.requestVote.CallUnary(ctx, req)
}

// AppendEntries calls proto.v1.CMService.AppendEntries.
func (c *cMServiceClient) AppendEntries(ctx context.Context, req *connect.Request[v1.AppendEntriesRequest]) (*connect.Response[v1.AppendEntriesResponse], error) {
	return c.appendEntries.CallUnary(ctx, req)
}

// AddMember calls proto.v1.CMService.AddMember.
func (c *cMServiceClient) AddMember(ctx context.Context, req *connect.Request[v1.AddMemberRequest]) (*connect.Response[v1.AddMemberResponse], error) {
	return c.addMember.CallUnary(ctx, req)
}

// CMServiceHandler is an implementation of the proto.v1.CMService service.
type CMServiceHandler interface {
	RequestVote(context.Context, *connect.Request[v1.RequestVoteRequest]) (*connect.Response[v1.RequestVoteResponse], error)
	AppendEntries(context.Context, *connect.Request[v1.AppendEntriesRequest]) (*connect.Response[v1.AppendEntriesResponse], error)
	AddMember(context.Context, *connect.Request[v1.AddMemberRequest]) (*connect.Response[v1.AddMemberResponse], error)
}

// NewCMServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCMServiceHandler(svc CMServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cMServiceRequestVoteHandler := connect.NewUnaryHandler(
		CMServiceRequestVoteProcedure,
		svc.RequestVote,
		connect.WithSchema(cMServiceRequestVoteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cMServiceAppendEntriesHandler := connect.NewUnaryHandler(
		CMServiceAppendEntriesProcedure,
		svc.AppendEntries,
		connect.WithSchema(cMServiceAppendEntriesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cMServiceAddMemberHandler := connect.NewUnaryHandler(
		CMServiceAddMemberProcedure,
		svc.AddMember,
		connect.WithSchema(cMServiceAddMemberMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.v1.CMService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CMServiceRequestVoteProcedure:
			cMServiceRequestVoteHandler.ServeHTTP(w, r)
		case CMServiceAppendEntriesProcedure:
			cMServiceAppendEntriesHandler.ServeHTTP(w, r)
		case CMServiceAddMemberProcedure:
			cMServiceAddMemberHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCMServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCMServiceHandler struct{}

func (UnimplementedCMServiceHandler) RequestVote(context.Context, *connect.Request[v1.RequestVoteRequest]) (*connect.Response[v1.RequestVoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.CMService.RequestVote is not implemented"))
}

func (UnimplementedCMServiceHandler) AppendEntries(context.Context, *connect.Request[v1.AppendEntriesRequest]) (*connect.Response[v1.AppendEntriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.CMService.AppendEntries is not implemented"))
}

func (UnimplementedCMServiceHandler) AddMember(context.Context, *connect.Request[v1.AddMemberRequest]) (*connect.Response[v1.AddMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.CMService.AddMember is not implemented"))
}
